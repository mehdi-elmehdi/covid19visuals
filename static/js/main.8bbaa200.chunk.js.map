{"version":3,"sources":["components/Charts.js","components/CaseChart.js","components/CaseData.js","components/Today.js","components/CountryData.js","components/SelectBox.js","components/CovidData.js","App.js","serviceWorker.js","index.js"],"names":["Charts","chartRef","React","createRef","myChart","this","createChart","props","chartData","undefined","length","dates","confirmed","recovered","deaths","active","forEach","element","push","date","sum","pointRadius","padding","isMobile","myChartRef","current","getContext","isEmpty","Chart","type","data","labels","datasets","label","borderColor","fill","options","animation","duration","easing","layout","left","right","top","bottom","legend","boxWidth","title","display","scales","xAxes","ticks","maxTicksLimit","maxRotation","text","selectedCountry","update","id","ref","Component","CaseChart","dailyArr","index","splice","tooltips","enabled","mode","gridLines","yAxes","CaseData","changeInNumberFromPrevDay","sign","Col","md","sm","xs","className","class","Math","abs","color","Today","Row","CountryData","stats","Container","fluid","style","fontSize","fontWeight","SelectBox","span","offset","Form","Group","Control","as","custom","onChange","onChangeFunction","value","selectedValue","defaultValue","countryArr","map","country","key","CovidData","state","worldStats","selectedCounty","getData","bind","backToGlobalNumbers","fetch","then","response","json","Object","keys","i","countryData","worldChart","dailyData","setState","event","target","countryStats","lastUpdated","backgroundColor","textAlign","Button","onClick","marginTop","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8bbaa200.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\nimport {isEmpty} from \"lodash\";\r\nimport {isMobile} from 'react-device-detect';\r\n\r\nexport default class Charts extends React.Component {\r\n    chartRef = React.createRef();\r\n    constructor(){\r\n        super();\r\n        this.myChart ={};\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    createChart(props) {\r\n        if(props.chartData && props.chartData.length!==undefined){\r\n        var dates = [];\r\n        var confirmed = [];\r\n        var recovered = [];\r\n        var deaths = [];\r\n        var active = [];\r\n        props.chartData.forEach(element => {\r\n            dates.push(element.date);\r\n             confirmed.push(element.confirmed);\r\n             recovered.push(element.recovered);\r\n             deaths.push(element.deaths);\r\n             var sum =0;\r\n             active.push(sum+=element.confirmed-element.recovered-element.deaths)\r\n\r\n        });\r\n        let pointRadius = 3;\r\n        let padding = 50;\r\n        if(isMobile) {\r\n            pointRadius = 1;\r\n            padding = 5;\r\n        }\r\n\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        if(!isEmpty(this.myChart)) {\r\n            this.myChart.data.datasets[0].data = confirmed;\r\n            this.myChart.data.datasets[1].data = recovered;\r\n            this.myChart.data.datasets[2].data = deaths;\r\n            this.myChart.data.datasets[3].data = active;\r\n            this.myChart.options.title.text = props.selectedCountry;\r\n            this.myChart.update();\r\n        } else{ \r\n           /*  if(isMobile){\r\n                Chart.defaults.global.elements.point.borderWidth =0;\r\n            } */\r\n        this.myChart =  new Chart(myChartRef, {\r\n            type : \"line\",\r\n            data : {\r\n                labels: dates,\r\n                datasets: [\r\n                    {\r\n                        label: \"Confirmed\",\r\n                        data : confirmed,\r\n                        borderColor : '#4285f4',\r\n                        fill : false,\r\n                        pointRadius : pointRadius\r\n\r\n                    },{\r\n                        label: \"Recovered\",\r\n                        data : recovered,\r\n                        borderColor : '#0c9d58',\r\n                        fill : false,\r\n                        pointRadius : pointRadius\r\n                    },{\r\n                        label: \"Deaths\",\r\n                        data : deaths,\r\n                        borderColor : '#db4337',\r\n                        fill : false,\r\n                        pointRadius : pointRadius\r\n                    },{\r\n                        label: \"Active\",\r\n                        data : active,\r\n                        borderColor : '#f4b400',\r\n                        fill : false,\r\n                        pointRadius : pointRadius\r\n                    }\r\n                ]\r\n            },\r\n            options : {\r\n                animation : {\r\n                    duration : 1000, \r\n                    easing : 'easeInOutQuint'\r\n\r\n                },\r\n                layout : {\r\n                    padding : {\r\n                        left: padding,\r\n                        right : padding,\r\n                        top: padding,\r\n                        bottom: 10, \r\n                    },\r\n                },\r\n                legend : {\r\n\r\n                    labels : {\r\n                        boxWidth: isMobile ? 10: 40,\r\n                        padding : 10\r\n                    }\r\n                },\r\n                title : {\r\n                    display : false,\r\n                },\r\n                scales:{\r\n                    xAxes: [\r\n                        {\r\n                            ticks:{\r\n                                maxTicksLimit : isMobile ? 4 : 10,\r\n                                maxRotation : 0\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        })\r\n    }\r\n    }\r\n}\r\n\r\n\r\nrender(){\r\n\r\n    return(\r\n        <div>\r\n            <canvas id = \"myChart\" ref={this.chartRef}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport Chart from 'chart.js';\r\nimport {isEmpty} from \"lodash\";\r\n\r\nexport default class CaseChart extends React.Component {\r\n    chartRef = React.createRef();\r\n    constructor(){\r\n        super();\r\n        this.myChart ={};\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    createChart(props) {\r\n        if(props.chartData && props.chartData.length!==undefined){\r\n            let dailyArr = [];\r\n            props.chartData.forEach((element, index) => {\r\n                dailyArr.push(element-props.chartData[index-1])\r\n            });\r\n   \r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        if(!isEmpty(this.myChart)) {\r\n            this.myChart.data.datasets[0].data = dailyArr.splice(-20);\r\n          \r\n            this.myChart.update();\r\n        } else{ \r\n        this.myChart = new Chart(myChartRef, {\r\n            type : \"line\",\r\n            data : {\r\n                labels: props.dates.splice(-20),\r\n                datasets: [\r\n                    {\r\n                        label: \"Confirmed\",\r\n                        data : dailyArr.splice(-20), \r\n                        borderColor : '#4285f4',\r\n                        fill : false,\r\n                       pointRadius : 0\r\n                    }\r\n                ]\r\n            },\r\n            options : {\r\n                animation : {\r\n                    duration : 2000, \r\n                    easing : 'easeInOutQuint'\r\n\r\n                },\r\n                tooltips : {\r\n                    enabled : true,\r\n                    mode : \"nearest\"\r\n                },\r\n                \r\n                legend : {\r\n                   display : false\r\n                },\r\n                title : {\r\n                    display : false,\r\n                   },\r\n                scales:{\r\n                    xAxes: [\r\n                        {\r\n                            ticks:{\r\n                                display : false\r\n                                },\r\n                                   gridLines: {\r\n                                       display : false\r\n                                   }\r\n                        }\r\n                    ],\r\n                    yAxes: [\r\n                        {\r\n                            ticks:{\r\n                                display : false\r\n                                },\r\n                                   gridLines: {\r\n                                       display : false\r\n                                   }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        })\r\n    }\r\n    }\r\n}\r\n\r\n\r\n\r\nrender(){\r\n\r\n    return(\r\n        <div>\r\n            <canvas id = \"myChart\" ref={this.chartRef}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Col} from 'react-bootstrap';\r\nimport CaseChart from './CaseChart'\r\nfunction CaseData(props) {\r\n    var changeInNumberFromPrevDay = props.data[props.data.length-1]-props.data[props.data.length-2];\r\n    var sign = changeInNumberFromPrevDay > 0? \"+\" :\r\n    changeInNumberFromPrevDay < 0 ? \"-\" : \"\";\r\n    return (\r\n        <Col md={2} sm={4} xs={4} className={props.class}>\r\n            {props.data[props.data.length-1]}<br /> \r\n            {props.title}\r\n            <div>[{sign}{Math.abs(changeInNumberFromPrevDay)}]</div>\r\n            <CaseChart chartData={props.data} dates ={props.dates} color=\"#005C25\"/>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default CaseData;","import React from 'react';\r\nimport {Row} from 'react-bootstrap';\r\nimport CaseData from './CaseData';\r\n\r\nfunction Today(props) {\r\n    if(props.data && props.data.length!==undefined) {\r\n        let confirmed=[], deaths=[],recovered=[],active=[], dates=[];\r\n        props.data.forEach((data) =>{\r\n            confirmed.push(data.confirmed);\r\n            deaths.push(data.deaths);\r\n            recovered.push(data.recovered);\r\n            active.push(data.confirmed - data.recovered - data.deaths);\r\n            dates.push(data.date);\r\n        })\r\n        return (\r\n            <Row className='today-row justify-content-center'>\r\n                <CaseData class=\"confirmed\"\r\n                    data={confirmed} dates={dates} title=\"Confirmed\" />\r\n    \r\n                <CaseData class=\"recovered\"\r\n                    data={recovered} dates={dates} title=\"Recovered\" />\r\n                \r\n                <CaseData class=\"deaths\"\r\n                    data={deaths} dates={dates} title=\"Deaths\" />\r\n                \r\n                <CaseData class=\"active\"\r\n                    data={active} dates={dates} title=\"Active\" />\r\n                \r\n            </Row>\r\n        )\r\n    }else{\r\n        return (<></>);\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\nexport default Today;","import React from 'react';\r\nimport Charts from './Charts';\r\nimport Today from './Today';\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\n\r\nfunction CountryData(props) {\r\n    // world data having arrays for dates, confirmed, recovered,active and deaths\r\n    const chartData = props.stats;\r\n    const selectedCountry = props.selectedCountry;\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col md={12} style={{ fontSize: 40, fontWeight: 'bold', padding: 20 }}>\r\n                    {selectedCountry}\r\n                    \r\n                </Col>\r\n            </Row>\r\n            <Today data={chartData} />\r\n            <div style={{ display: !selectedCountry && 'none' }}>\r\n                <Charts chartData={chartData} selectedCountry={selectedCountry} />\r\n            </div>\r\n        </Container>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default CountryData;","import React from 'react';\r\nimport {Col, Form} from 'react-bootstrap';\r\n\r\nfunction SelectBox(props) {\r\n    return (\r\n        <Col md={{ span: 4, offset: 5 }} >\r\n            <Form>\r\n                <Form.Group className=\"country-select\">\r\n                    <Form.Control as=\"select\" custom onChange={props.onChangeFunction} value = {props.selectedValue} defaultValue=\"select\">\r\n                        <option value=\"select\"> Search Country </option>\r\n                        {props.countryArr.map((country) => <option value={country} key={country}> {country}</option>)}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Form>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default SelectBox;\r\n","import React from 'react';\r\nimport CountryData from './CountryData';\r\nimport { Container, Row, Col, Button} from 'react-bootstrap'\r\nimport SelectBox from './SelectBox';\r\n\r\nexport default class CovidData extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            countryArr: [],\r\n            data: {},\r\n            worldStats: {},\r\n            selectedCounty: \"\",\r\n           }\r\n        this.getData = this.getData.bind(this);\r\n        this.backToGlobalNumbers = this.backToGlobalNumbers.bind(this);\r\n        fetch(\"https://pomber.github.io/covid19/timeseries.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                var worldStats = { confirmed: 0, recovered: 0, deaths: 0 };\r\n                var countryArr = Object.keys(data).map(i => i);\r\n                countryArr.forEach((country) => {\r\n                    let countryData = data[country];\r\n                    // pick last object for today data\r\n                    countryData = countryData[countryData.length - 1];\r\n                    worldStats.confirmed += countryData.confirmed;\r\n                    worldStats.recovered += countryData.recovered;\r\n                    worldStats.deaths += countryData.deaths;\r\n                });\r\n                // world data\r\n                var worldChart = [];\r\n                countryArr.forEach((country) => {\r\n                    let countryData = data[country];\r\n                    countryData.forEach((dailyData, index) => {\r\n                        if (worldChart[index] === undefined) {\r\n                            var worldStats = { date: dailyData.date, confirmed: dailyData.confirmed, recovered: dailyData.recovered, deaths: dailyData.deaths };\r\n                            worldChart.push(worldStats);\r\n                        } else {\r\n                            worldChart[index].confirmed += dailyData.confirmed;\r\n                            worldChart[index].recovered += dailyData.recovered;\r\n                            worldChart[index].deaths += dailyData.deaths;\r\n                        }\r\n                    });\r\n\r\n                });\r\n                this.setState({\r\n                    countryArr: countryArr,\r\n                    data: data,\r\n                    worldStats: worldStats,\r\n                    worldChart: worldChart,\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n\r\n\r\n    getData(event) {\r\n        var country = event.target.value;\r\n        if (country !== \"select\") {\r\n            this.setState({\r\n                selectedCountry: country,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                selectedCountry: \"\",\r\n            })\r\n        }\r\n    }\r\n\r\n    backToGlobalNumbers() {\r\n        this.setState({\r\n            selectedCountry: \"\",\r\n        })\r\n    }\r\n    render() {\r\n        const countryStats = this.state.data[this.state.selectedCountry];\r\n        const worldChart = this.state.worldChart;\r\n        const lastUpdated = worldChart!==undefined?worldChart[worldChart.length-1].date:\"\";\r\n        return (\r\n            <Container fluid style={{ backgroundColor: '#f8f8ff', padding: 0 }} className=\"App\">\r\n                {/*Header starts here */}\r\n                <Row className=\"App-header\">\r\n                    <Col md={3} style={{ textAlign: 'left' }}>\r\n                        Covid19 Visuals\r\n                    </Col>\r\n                    {/*Select Box for country search ends here */}\r\n                    <SelectBox onChangeFunction={this.getData} countryArr={this.state.countryArr} selectedValue={this.state.selectedCountry}/>\r\n                </Row>\r\n                {/*Header ends here */}\r\n                <Row>\r\n                     {/*Get back to global numbers */}\r\n                    <Col md={{span:1}} xs={1}>\r\n                    {this.state.selectedCountry ? \r\n                         <Button className='back' onClick={this.backToGlobalNumbers}>Back</Button>\r\n                  : <></>}\r\n                  {/*Last updated */}\r\n                    </Col> \r\n                    <Col md={{span:2, offset:9}} xs={{span:7 , offset:4}} style={{fontSize: 14, marginTop:12}} > \r\n                        Last Updated: {lastUpdated}\r\n                    </Col>\r\n                   \r\n                </Row>\r\n                <Container fluid>\r\n                    {this.state.selectedCountry ? \r\n                        <CountryData stats={countryStats} selectedCountry={this.state.selectedCountry} /> : \r\n                        <CountryData stats={worldChart} selectedCountry=\"Global Numbers\"/>\r\n                        }\r\n                        \r\n                </Container>\r\n                <footer>\r\n                    <Row className=\"App-footer\">\r\n                        <Col md={2} xs={2}>\r\n                            Created by <a href=\"https://github.com/workaholic7/covid19visuals\" target=\"_blank\">workaholic7</a>\r\n                        </Col>\r\n                        <Col md={{span:1, offset:9}} xs={{span:1, offset:9}}>\r\n                            <a href=\"https://github.com/pomber/covid19\">Datasource</a>\r\n                        \r\n                        </Col>\r\n                    </Row>\r\n                </footer>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport CovidData from './components/CovidData';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n  <CovidData />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}