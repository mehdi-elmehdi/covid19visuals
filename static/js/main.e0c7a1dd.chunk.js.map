{"version":3,"sources":["components/CaseChart.js","components/CaseData.js","components/Today.js","components/Charts.js","components/CountryData.js","components/CovidData.js","App.js","serviceWorker.js","index.js"],"names":["CaseChart","chartRef","React","createRef","myChart","this","createChart","props","chartData","undefined","length","dailyArr","forEach","element","index","push","myChartRef","current","getContext","isEmpty","Chart","type","data","labels","dates","splice","datasets","label","borderColor","fill","pointRadius","options","animation","duration","easing","tooltips","enabled","mode","legend","display","title","scales","xAxes","ticks","gridLines","yAxes","update","id","ref","Component","CaseData","changeInNumberFromPrevDay","sign","Col","md","className","class","Math","abs","Today","confirmed","deaths","recovered","active","date","Row","Charts","sum","layout","padding","left","right","top","bottom","text","selectedCountry","fontSize","fontColor","maxTicksLimit","maxRotation","CountryData","stats","Container","fluid","style","backgroundColor","fontWeight","CovidData","state","countryArr","worldStats","selectedCounty","getData","bind","fetch","then","response","json","Object","keys","map","i","country","countryData","worldChart","dailyData","setState","event","target","value","countryStats","textAlign","span","offset","Form","Group","Control","as","custom","onChange","defaultValue","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0c7a1dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\nimport {isEmpty} from \"lodash\";\r\n\r\nexport default class CaseChart extends React.Component {\r\n    chartRef = React.createRef();\r\n    constructor(){\r\n        super();\r\n        this.myChart ={};\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    createChart(props) {\r\n        if(props.chartData && props.chartData.length!==undefined){\r\n            let dailyArr = [];\r\n            props.chartData.forEach((element, index) => {\r\n                dailyArr.push(element-props.chartData[index-1])\r\n            });\r\n   \r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        if(!isEmpty(this.myChart)) {\r\n            this.myChart.data.datasets[0].data = dailyArr.splice(-20);\r\n          \r\n            this.myChart.update();\r\n        } else{ \r\n        this.myChart = new Chart(myChartRef, {\r\n            type : \"line\",\r\n            data : {\r\n                labels: props.dates.splice(-20),\r\n                datasets: [\r\n                    {\r\n                        label: \"Confirmed\",\r\n                        data : dailyArr.splice(-20), \r\n                        borderColor : '#4285f4',\r\n                        fill : false,\r\n                       pointRadius : 0\r\n                    }\r\n                ]\r\n            },\r\n            options : {\r\n                animation : {\r\n                    duration : 2000, \r\n                    easing : 'easeInOutQuint'\r\n\r\n                },\r\n                tooltips : {\r\n                    enabled : true,\r\n                    mode : \"nearest\"\r\n                },\r\n                \r\n                legend : {\r\n                   display : false\r\n                },\r\n                title : {\r\n                    display : false,\r\n                   },\r\n                scales:{\r\n                    xAxes: [\r\n                        {\r\n                            ticks:{\r\n                                display : false\r\n                                },\r\n                                   gridLines: {\r\n                                       display : false\r\n                                   }\r\n                        }\r\n                    ],\r\n                    yAxes: [\r\n                        {\r\n                            ticks:{\r\n                                display : false\r\n                                },\r\n                                   gridLines: {\r\n                                       display : false\r\n                                   }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        })\r\n    }\r\n    }\r\n}\r\n\r\n\r\n\r\nrender(){\r\n\r\n    return(\r\n        <div>\r\n            <canvas id = \"myChart\" ref={this.chartRef}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Col} from 'react-bootstrap';\r\nimport CaseChart from './CaseChart'\r\nfunction CaseData(props) {\r\n    var changeInNumberFromPrevDay = props.data[props.data.length-1]-props.data[props.data.length-2];\r\n    var sign = changeInNumberFromPrevDay > 0? \"+\" : \"-\";\r\n    return (\r\n        <Col md={2} className={props.class}>\r\n            {props.data[props.data.length-1]}<br /> \r\n            {props.title}\r\n            <div>[{sign}{Math.abs(changeInNumberFromPrevDay)}]</div>\r\n    <CaseChart chartData={props.data} dates ={props.dates}/>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default CaseData;","import React from 'react';\r\nimport {Row} from 'react-bootstrap';\r\nimport CaseData from './CaseData';\r\n\r\nfunction Today(props) {\r\n    if(props.data && props.data.length!==undefined) {\r\n        let confirmed=[], deaths=[],recovered=[],active=[], dates=[];\r\n        props.data.forEach((data) =>{\r\n            confirmed.push(data.confirmed);\r\n            deaths.push(data.deaths);\r\n            recovered.push(data.recovered);\r\n            active.push(data.confirmed - data.recovered - data.deaths);\r\n            dates.push(data.date);\r\n        })\r\n        return (\r\n            <Row className='today-row justify-content-center'>\r\n                <CaseData class=\"confirmed\"\r\n                    data={confirmed} dates={dates} title=\"Confirmed\" />\r\n    \r\n                <CaseData class=\"recovered\"\r\n                    data={recovered} dates={dates} title=\"Recovered\" />\r\n                \r\n                <CaseData class=\"deaths\"\r\n                    data={deaths} dates={dates} title=\"Deaths\" />\r\n                \r\n                <CaseData class=\"active\"\r\n                    data={active} dates={dates} title=\"Active\" />\r\n                \r\n            </Row>\r\n        )\r\n    }else{\r\n        return (<></>);\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\nexport default Today;","import React from 'react';\r\nimport Chart from 'chart.js';\r\nimport {isEmpty} from \"lodash\";\r\n\r\nexport default class Charts extends React.Component {\r\n    chartRef = React.createRef();\r\n    constructor(){\r\n        super();\r\n        this.myChart ={};\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.createChart(this.props);\r\n    }\r\n\r\n    createChart(props) {\r\n        if(props.chartData && props.chartData.length!==undefined){\r\n        var dates = [];\r\n        var confirmed = [];\r\n        var recovered = [];\r\n        var deaths = [];\r\n        var active = [];\r\n        props.chartData.forEach(element => {\r\n            dates.push(element.date);\r\n             confirmed.push(element.confirmed);\r\n             recovered.push(element.recovered);\r\n             deaths.push(element.deaths);\r\n             var sum =0;\r\n             active.push(sum+=element.confirmed-element.recovered-element.deaths)\r\n\r\n        });\r\n\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        if(!isEmpty(this.myChart)) {\r\n            this.myChart.data.datasets[0].data = confirmed;\r\n            this.myChart.data.datasets[1].data = recovered;\r\n            this.myChart.data.datasets[2].data = deaths;\r\n            this.myChart.data.datasets[3].data = active;\r\n            this.myChart.options.title.text = props.selectedCountry;\r\n            this.myChart.update();\r\n        } else{ \r\n        this.myChart =  new Chart(myChartRef, {\r\n            type : \"line\",\r\n            data : {\r\n                labels: dates,\r\n                datasets: [\r\n                    {\r\n                        label: \"Confirmed\",\r\n                        data : confirmed,\r\n                        borderColor : '#4285f4',\r\n                        fill : false,\r\n\r\n                    },{\r\n                        label: \"Recovered\",\r\n                        data : recovered,\r\n                        borderColor : '#0c9d58',\r\n                        fill : false,\r\n                    },{\r\n                        label: \"Deaths\",\r\n                        data : deaths,\r\n                        borderColor : '#db4337',\r\n                        fill : false,\r\n                    },{\r\n                        label: \"Active\",\r\n                        data : active,\r\n                        borderColor : '#f4b400',\r\n                        fill : false,\r\n                    }\r\n                ]\r\n            },\r\n            options : {\r\n                animation : {\r\n                    duration : 1000, \r\n                    easing : 'easeInOutQuint'\r\n\r\n                },\r\n                layout : {\r\n                    padding : {\r\n                        left: 50,\r\n                        right : 50,\r\n                        top: 50,\r\n                        bottom: 10, \r\n                    },\r\n                },\r\n                legend : {\r\n                    labels : {\r\n                        padding : 10\r\n                    }\r\n                },\r\n                title : {\r\n                    display : false,\r\n                    text : props.selectedCountry,\r\n                    fontSize : 30,\r\n                    fontColor : '#333a40'\r\n                },\r\n                scales:{\r\n                    xAxes: [\r\n                        {\r\n                            ticks:{\r\n                                maxTicksLimit : 10,\r\n                                maxRotation : 0\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        })\r\n    }\r\n    }\r\n}\r\n\r\n\r\nrender(){\r\n\r\n    return(\r\n        <div>\r\n            <canvas id = \"myChart\" ref={this.chartRef}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport Charts from './Charts';\r\nimport Today from './Today';\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\n\r\nfunction CountryData(props) {\r\n    // world data having arrays for dates, confirmed, recovered,active and deaths\r\n    const chartData = props.stats;\r\n    const selectedCountry = props.selectedCountry;\r\n    return (\r\n        <Container fluid style={{ backgroundColor: '#f8f8ff', padding: 0 }}>\r\n            <Row>\r\n                <Col md={12} style={{ fontSize: 40, fontWeight: 'bold', padding: 20 }}>\r\n                    {selectedCountry}\r\n                </Col>\r\n            </Row>\r\n            <Today data={chartData} />\r\n            <div style={{ display: !selectedCountry && 'none' }}>\r\n                <Charts chartData={chartData} selectedCountry={selectedCountry} />\r\n            </div>\r\n        </Container>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default CountryData;","import React from 'react';\r\nimport Today from './Today'\r\nimport CountryData from './CountryData';\r\nimport { Container, Row, Col, Form } from 'react-bootstrap'\r\nimport Charts from './Charts';\r\n\r\nexport default class CovidData extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            countryArr: [],\r\n            data: {},\r\n            worldStats: {},\r\n            selectedCounty: \"\",\r\n        }\r\n        this.getData = this.getData.bind(this);\r\n        fetch(\"https://pomber.github.io/covid19/timeseries.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                var worldStats = { confirmed: 0, recovered: 0, deaths: 0 };\r\n                var countryArr = Object.keys(data).map(i => i);\r\n                countryArr.forEach((country) => {\r\n                    let countryData = data[country];\r\n                    // pick last object for today data\r\n                    countryData = countryData[countryData.length - 1];\r\n                    worldStats.confirmed += countryData.confirmed;\r\n                    worldStats.recovered += countryData.recovered;\r\n                    worldStats.deaths += countryData.deaths;\r\n                });\r\n                // world data\r\n                var worldChart = [];\r\n                countryArr.forEach((country) => {\r\n                    let countryData = data[country];\r\n                    countryData.forEach((dailyData, index) => {\r\n                        if (worldChart[index] === undefined) {\r\n                            var worldStats = { date: dailyData.date, confirmed: dailyData.confirmed, recovered: dailyData.recovered, deaths: dailyData.deaths };\r\n                            worldChart.push(worldStats);\r\n                        } else {\r\n                            worldChart[index].confirmed += dailyData.confirmed;\r\n                            worldChart[index].recovered += dailyData.recovered;\r\n                            worldChart[index].deaths += dailyData.deaths;\r\n                        }\r\n                    });\r\n\r\n                });\r\n                this.setState({\r\n                    countryArr: countryArr,\r\n                    data: data,\r\n                    worldStats: worldStats,\r\n                    worldChart: worldChart,\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n\r\n\r\n    getData(event) {\r\n        var country = event.target.value;\r\n        if (country !== \"select\") {\r\n            this.setState({\r\n                selectedCountry: country,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                selectedCountry: \"\",\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const countryStats = this.state.data[this.state.selectedCountry];\r\n        const worldChart = this.state.worldChart;\r\n        return (\r\n            <Container fluid className=\"App\">\r\n                {/*Header starts here */}\r\n                <Row className=\"App-header\">\r\n                    <Col md={3} style={{ textAlign: 'left' }}>Covid19 Visuals</Col>\r\n                    <Col md={{ span: 4, offset: 5 }} >\r\n                        <Form>\r\n                            <Form.Group className=\"country-select\">\r\n                                <Form.Control as=\"select\" custom onChange={this.getData} defaultValue=\"select\">\r\n                                    <option value=\"select\"> Search Country </option>\r\n                                    {this.state.countryArr.map((country) => <option value={country}> {country}</option>)}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                {/*Header ends here */}\r\n                <Container fluid>\r\n                    <Container fluid style={{ backgroundColor: '#f8f8ff', padding: 0 }}>\r\n                        <Row>\r\n                            <Col md={12} style={{ fontSize: 40, fontWeight: 'bold', padding: 20 }}>\r\n                                Global Numbers\r\n                            </Col>\r\n                        </Row>\r\n                        <Today data={worldChart} />\r\n                        {/*create world chart */}\r\n                        {!this.state.selectedCountry ? <Charts chartData={worldChart} selectedCountry=\"\" /> : <></>}\r\n                    </Container>\r\n                    {/*create country chart */}\r\n                    {this.state.selectedCountry ? <CountryData stats={countryStats} selectedCountry={this.state.selectedCountry} /> : <></>}\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport CovidData from './components/CovidData';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <CovidData />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}